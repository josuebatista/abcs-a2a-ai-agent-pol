{
  "protocolVersion": "0.3.0",
  "name": "A2A AI Agent POC",
  "description": "Agent2Agent Protocol compliant AI agent with Gemini 2.5 Flash API capabilities for text summarization, sentiment analysis, and data extraction. Requires Bearer token authentication.",
  "url": "https://a2a-agent-hs6athqpoa-uc.a.run.app",
  "version": "0.8.0",
  "provider": {
    "name": "ABCS A2A Agent POC",
    "url": "https://github.com/josuebatista/abcs-a2a-ai-agent-pol"
  },
  "capabilities": {
    "streaming": true,
    "pushNotifications": false,
    "stateTransitionHistory": false
  },
  "defaultInputModes": [
    "text/plain",
    "application/json"
  ],
  "defaultOutputModes": [
    "application/json"
  ],
  "skills": [
    {
      "id": "text.summarize",
      "name": "Text Summarization",
      "description": "Summarizes long text content into concise summaries using Gemini 2.5 Flash",
      "tags": ["nlp", "text-processing", "summarization", "ai"],
      "input": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "The text to summarize",
            "minLength": 10,
            "maxLength": 10000
          },
          "max_length": {
            "type": "integer",
            "description": "Maximum length of summary in words",
            "default": 100,
            "minimum": 10,
            "maximum": 500
          }
        },
        "required": ["text"]
      },
      "output": {
        "type": "object",
        "properties": {
          "summary": {
            "type": "string",
            "description": "The generated summary"
          },
          "original_length": {
            "type": "integer",
            "description": "Length of original text in characters"
          },
          "summary_length": {
            "type": "integer",
            "description": "Length of summary in characters"
          },
          "compression_ratio": {
            "type": "number",
            "description": "Ratio of summary length to original length"
          },
          "model_used": {
            "type": "string",
            "description": "AI model used for summarization"
          }
        }
      }
    },
    {
      "id": "text.analyze_sentiment",
      "name": "Sentiment Analysis",
      "description": "Analyzes the sentiment of text content with confidence scores using Gemini 2.5 Flash",
      "tags": ["nlp", "sentiment-analysis", "text-processing", "ai"],
      "input": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "The text to analyze for sentiment",
            "minLength": 1,
            "maxLength": 5000
          }
        },
        "required": ["text"]
      },
      "output": {
        "type": "object",
        "properties": {
          "sentiment": {
            "type": "string",
            "enum": ["positive", "negative", "neutral"],
            "description": "Overall sentiment classification"
          },
          "confidence": {
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "description": "Confidence score for the sentiment prediction"
          },
          "scores": {
            "type": "object",
            "properties": {
              "positive": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "description": "Positive sentiment score"
              },
              "negative": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "description": "Negative sentiment score"
              },
              "neutral": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "description": "Neutral sentiment score"
              }
            }
          },
          "model_used": {
            "type": "string",
            "description": "AI model used for sentiment analysis"
          }
        }
      }
    },
    {
      "id": "data.extract",
      "name": "Data Extraction",
      "description": "Extracts structured entities (persons, locations, organizations, dates, events, contacts) from unstructured text using Gemini 2.5 Flash with regex fallback",
      "tags": ["nlp", "entity-extraction", "text-processing", "ai", "ner"],
      "input": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "The text to extract data from",
            "minLength": 1,
            "maxLength": 10000
          },
          "schema": {
            "type": "object",
            "description": "Optional schema to guide extraction",
            "default": {}
          }
        },
        "required": ["text"]
      },
      "output": {
        "type": "object",
        "properties": {
          "extracted_data": {
            "type": "object",
            "description": "The extracted structured data with entity types",
            "properties": {
              "persons": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {"type": "string"},
                    "salience": {"type": "number"}
                  }
                }
              },
              "locations": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {"type": "string"},
                    "salience": {"type": "number"}
                  }
                }
              },
              "organizations": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {"type": "string"},
                    "salience": {"type": "number"}
                  }
                }
              },
              "dates": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {"type": "string"},
                    "salience": {"type": "number"}
                  }
                }
              },
              "events": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {"type": "string"},
                    "salience": {"type": "number"}
                  }
                }
              },
              "phones": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {"type": "string"},
                    "salience": {"type": "number"}
                  }
                }
              },
              "emails": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {"type": "string"},
                    "salience": {"type": "number"}
                  }
                }
              }
            }
          },
          "entity_count": {
            "type": "integer",
            "description": "Total number of entities extracted"
          },
          "confidence": {
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "description": "Overall confidence in the extraction"
          },
          "model_used": {
            "type": "string",
            "description": "AI model used for data extraction"
          }
        }
      }
    }
  ],
  "securitySchemes": {
    "bearerAuth": {
      "type": "http",
      "scheme": "bearer",
      "bearerFormat": "API Key",
      "description": "Bearer token authentication - API key required for all requests"
    }
  },
  "security": [{"bearerAuth": []}],
  "endpoints": {
    "rpc": "/rpc",
    "status": "/tasks/{task_id}",
    "stream": "/tasks/{task_id}/stream"
  },
  "transport": {
    "protocol": "JSONRPC",
    "version": "2.0",
    "features": {
      "sse": true,
      "polling": true
    }
  },
  "contact": {
    "name": "ABCS A2A Development Team",
    "email": "support@example.com",
    "url": "https://github.com/josuebatista/abcs-a2a-ai-agent-pol/issues"
  },
  "documentation": "https://github.com/josuebatista/abcs-a2a-ai-agent-pol/blob/main/README.md",
  "metadata": {
    "created": "2025-09-21T23:00:00Z",
    "updated": "2025-10-10T00:00:00Z",
    "tags": ["ai", "nlp", "text-processing", "a2a", "google-cloud", "gemini", "sentiment-analysis", "summarization", "entity-extraction"],
    "categories": ["artificial-intelligence", "text-analysis", "agent-to-agent"],
    "environment": "production",
    "aiProvider": "Google Gemini 2.5 Flash",
    "compliance": "A2A Protocol v0.3.0"
  }
}
